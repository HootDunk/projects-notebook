(()=>{"use strict";const t=()=>{const t=document.querySelector(".modal-guts");console.log(t),t.innerHTML='\n  <h1>Edit Task</h1>\n  <form id="task-form">\n    <div class="form-row">\n      <label for="title">Title:</label>\n      <input type="text" id="title" name="title" value="">\n      <label for="due-date">Due Date:</label>\n      <input type="date" id="date" name="date" value="">\n    </div>\n    <div class="form-row">\n      <label>Difficulty</label>\n    </div>\n    <div class="form-row">\n      <div class="radio-toolbar">\n        <input type="radio" id="radio1" name="radios" value="#F5D346">\n        <label for="radio1">Low</label>\n        <input type="radio" id="radio2" name="radios" value="#D98121">\n        <label for="radio2">Medium</label>\n        <input type="radio" id="radio3" name="radios" value="#D3151C">\n        <label for="radio3">High</label>\n      </div>\n    </div>\n      <div class="form-row">\n        <label for="description">Description</label>\n      </div>\n      <div class="form-row">\n        <textarea id="description" name="description"></textarea>\n      </div>\n      <div class="form-row bottom">\n        <button type="button">Delete</button>\n        <button type="submit">Submit</button>\n      </div>\n  </form>\n  '},e=(()=>{const t=document.querySelector(".modal-guts"),e=document.querySelector("#modal"),o=document.querySelector("#modal-overlay");return{newProjectHTML:()=>{t.innerHTML='\n      <h1>New Project</h1>\n      <form id="task-form">\n  \n        <div class="form-row">\n          <label for="project-title">Title:</label>\n        </div>\n  \n        <div class="form-row">\n          <input type="text" id="project-title" name="project-title" value="">\n        </div>\n  \n  \n          <div class="form-row">\n            <label for="project-description">Description</label>\n          </div>\n          <div class="form-row">\n            <textarea id="project-description" name="project-description"></textarea>\n          </div>\n          <div class="form-row bottom">\n            <button type="button">Delete</button>\n            <button type="submit">Submit</button>\n          </div>\n      </form>\n    '},toggle:()=>{e.classList.toggle("closed"),o.classList.toggle("closed")}}})(),o=(()=>{const t=document.getElementById("task-grouping");return{clear:()=>{t.innerHTML=""},render:e=>{e.forEach((e=>{t.innerHTML+=`\n    <div class="task-item">\n      <div class="task accordian">\n  \n        <div id="priority-style"></div>\n        <input type="checkbox" class="todo-completed">\n        <h2 class="title">${e.title}</h2>\n        <h2 class="date">In X days</h2>\n  \n      </div>\n      <div class="task-full inactive">\n        <div class="description-top">\n          <h3>Description:</h3>\n          <h3>10/20/20</h3>\n          <i class="fas fa-ellipsis-v task-edit"></i>\n        </div>\n        <p>Bacon ipsum dolor amet ham short loin alcatra corned beef shank pig. Doner fatback corned beef brisket short ribs, bacon spare ribs short loin cow. Ball tip kevin alcatra rump brisket. Bacon meatloaf meatball ball tip burgdoggen sirloin.</p>\n      </div>\n    </div>\n    `}))}}})(),n=(()=>{const o=document.querySelector("#close-button"),n=document.getElementById("new-project"),i=document.getElementById("new-task"),r=()=>{document.getElementById("all-projects").addEventListener("click",(()=>{r.forEach((t=>{}))}))};return{modalClose:()=>{o.addEventListener("click",(function(){e.toggle()}))},newProject:()=>{n.addEventListener("click",(()=>{e.newProjectHTML(),e.toggle()}))},newTask:()=>{i.addEventListener("click",(()=>{t(),e.toggle()}))},allProjects:r}})(),i=()=>{Array.from(document.getElementsByClassName("todo-completed")).forEach((t=>{t.addEventListener("click",(()=>{console.log("toggle completed")}))}))},r=()=>{Array.from(document.getElementsByClassName("accordian")).forEach((t=>{t.addEventListener("click",(e=>{"todo-completed"!=e.target.className&&t.nextElementSibling.classList.toggle("inactive")}))}))},a=()=>{Array.from(document.getElementsByClassName("task-edit")).forEach((o=>{o.addEventListener("click",(o=>{t(),e.toggle()}))}))},s=()=>{const t=Array.from(document.getElementsByClassName("project-name"));console.log("projects",t),t.forEach((t=>{t.addEventListener("click",(()=>console.log(t)))}))};var l,d=new Uint8Array(16);function c(){if(!l&&!(l="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return l(d)}const m=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,u=function(t){return"string"==typeof t&&m.test(t)};for(var p=[],f=0;f<256;++f)p.push((f+256).toString(16).substr(1));const g=function(t,e,o){var n=(t=t||{}).random||(t.rng||c)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){o=o||0;for(var i=0;i<16;++i)e[o+i]=n[i];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=(p[t[e+0]]+p[t[e+1]]+p[t[e+2]]+p[t[e+3]]+"-"+p[t[e+4]]+p[t[e+5]]+"-"+p[t[e+6]]+p[t[e+7]]+"-"+p[t[e+8]]+p[t[e+9]]+"-"+p[t[e+10]]+p[t[e+11]]+p[t[e+12]]+p[t[e+13]]+p[t[e+14]]+p[t[e+15]]).toLowerCase();if(!u(o))throw TypeError("Stringified UUID is invalid");return o}(n)};function v(t,e){this.id=g(),this.name=t,this.description=e,this.active=!1,this.todoList=[]}function y(t,e,o,n){this.id=g(),this.title=t,this.description=e,this.priority=o,this.complete=!1,this.dueDate=n}if(v.prototype.addTodo=function(t){this.todoList.push(t)},v.prototype.toggleActive=function(){this.active=!this.active},v.prototype.getTodoList=function(){return this.todoList},v.prototype.deleteTodoItem=function(t){const e=this.todoList.findIndex((e=>e.id==t));this.todoList.splice(e,1)},v.prototype.getTodoItem=function(t){return this.todoList.find((e=>e.id==t))},y.prototype.sayID=function(){console.log(this.id)},y.prototype.toggleComplete=function(){this.complete=!this.complete},n.modalClose(),n.newProject(),n.newTask(),n.allProjects(),localStorage.length){const t=JSON.parse(localStorage.getItem("user"));console.log(t),t.sort(((t,e)=>t.name.localeCompare(e.name))),(t=>{const e=document.getElementById("dynamic-projects");t.forEach((t=>{e.innerHTML+=`<h2 data-id='${t.id}' class="project-name">${t.name}</h2>`}))})(t),s(),o.clear(),o.render(t[0].todoList),a(),r(),i()}else console.log("no data found")})();